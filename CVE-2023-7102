use strict;
use warnings;
use File::Copy;
use Time::HiRes qw(sleep);

# Define paths
my $module_path = '/path/to/Spreadsheet/ParseExcel/Utility.pm';  # Update this path
my $quarantine_path = '/path/to/quarantine/Utility.pm';          # Update this path
my $poll_interval = 3600;  # Polling interval in seconds (1 hour)

# Check module integrity
sub is_compromised {
    open my $fh, '<', $module_path or die "Cannot open $module_path: $!";
    while (my $line = <$fh>) {
        if ($line =~ /eval.*\$number \$conditional/) {
            close $fh;
            return 1; # Vulnerable pattern found
        }
    }
    close $fh;
    return 0; # Safe
}

# Disarm module
sub disarm_module {
    open my $in, '<', $module_path or die "Cannot open $module_path: $!";
    open my $out, '>', "$module_path.new" or die "Cannot write to $module_path.new: $!";
    
    while (my $line = <$in>) {
        if ($line =~ /eval.*\$number \$conditional/) {
            print $out "# Disabled due to security vulnerability\n";
            print $out "# $line"; # Comment out the unsafe line
        } else {
            print $out $line;
        }
    }

    close $in;
    close $out;
    move("$module_path.new", $module_path) or die "Could not update $module_path: $!";
}

# Quarantine module
sub quarantine_module {
    move($module_path, $quarantine_path) or die "Could not quarantine the module: $!";
    print "The compromised module has been quarantined.\n";
}

# Use CPAN to install the Spreadsheet::ParseExcel module
sub install_module_with_cpan {
    system("cpan Spreadsheet::ParseExcel") == 0
        or die "Failed to install Spreadsheet::ParseExcel via CPAN: $!";
    print "Spreadsheet::ParseExcel has been successfully installed via CPAN.\n";
}

# Periodically check the health of the module and update if necessary
sub start_polling {
    while (1) {
        if (is_compromised()) {
            print "Compromised Spreadsheet::ParseExcel module detected.\n";
            disarm_module();
            quarantine_module();
            install_module_with_cpan();
        } else {
            print "Spreadsheet::ParseExcel module is healthy.\n";
        }
        sleep($poll_interval);
    }
}

start_polling();
