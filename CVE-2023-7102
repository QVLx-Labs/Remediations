# $t@$h
# !!!Warning: This script DOES change your system
# Maintains a pure ParseExcel. Can tailor for other
# perl packages as well. Add this code to any code
use strict;
use warnings;
use File::Copy;
use Time::HiRes qw(sleep);
use File::Spec;
use Digest::SHA qw(sha256_hex);
use ExtUtils::Installed;

my $binary_path = 'cve20237102'; # Update to compiled binary path
my $poll_interval = 3600; # Polling interval in seconds (Default 1hr)
my $module_name = 'Spreadsheet::ParseExcel';

# Install PAR::Packer if new
sub install_par_packer {
    my $pp_check = `which pp`;
    if ($pp_check eq '') {
        print "Installing PAR::Packer...\n";
        system("cpan PAR::Packer") == 0
            or die "Failed to install PAR::Packer: $!";
    }
}

# Install module and get its path
sub install_module_with_cpan {
    system("cpan -i $module_name") == 0
        or die "Failed to install $module_name via CPAN: $!";
    print "$module_name has been successfully installed via CPAN.\n";

    my $inst = ExtUtils::Installed->new();
    my @modules = $inst->modules();
    foreach my $mod (@modules) {
        if ($mod eq $module_name) {
            my $module_path = ($inst->files($mod))[0]; # Get the path of the module
            return $module_path;
        }
    }
    die "Failed to find the installation path of $module_name";
}

# Calculate hash of the module
sub calculate_hash {
    my ($module_path) = @_;
    open my $fh, '<', $module_path or die "Cannot open $module_path: $!";
    binmode($fh);
    my $checksum = sha256_hex(<$fh>);
    close $fh;
    return $checksum;
}

# Periodic integrity check
sub start_polling {
    my $module_path = install_module_with_cpan();
    my $current_hash = calculate_hash($module_path);

    while (1) {
        sleep($poll_interval);
        my $new_hash = calculate_hash($module_path);

        if ($new_hash ne $current_hash) {
            print "Module hash has changed. Reinstalling $module_name.\n";
            $module_path = install_module_with_cpan();
            $current_hash = calculate_hash($module_path);
        } else {
            print "$module_name module integrity maintained.\n";
        }
    }
}

# Compile the script into a binary if new
unless (-e $binary_path) {
    install_par_packer();
    my $current_script = File::Spec->rel2abs(__FILE__);
    system("pp -o $binary_path $current_script") == 0
        or die "Failed to compile the script into a binary: $!";
    print "Compiled into binary: $binary_path\n";
    exit(0); # Exit after compilation
}

start_polling();
