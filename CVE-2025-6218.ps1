# CVE-2025-6218 WinRAR Directory Traversal Detector (Enhanced)
# Author: $t@$h, QVLx Labs
# This script performs detection only and makes no system changes.

Write-Host "`nCVE-2025-6218 WinRAR Attack Detector" -ForegroundColor Cyan
Write-Host "`n[*] Checking for installed WinRAR version..."

$cutoff = (Get-Date).AddMinutes(-60)
$hasAlerts = $false

function Get-WinRARVersion {
    $paths = @(
        "$env:ProgramFiles\WinRAR\WinRAR.exe",
        "$env:ProgramFiles(x86)\WinRAR\WinRAR.exe"
    )
    foreach ($path in $paths) {
        if (Test-Path $path) {
            $ver = (Get-Item $path).VersionInfo.ProductVersion
            return @{ Path = $path; Version = $ver }
        }
    }
    return $null
}

$winrar = Get-WinRARVersion

if ($winrar -eq $null) {
    Write-Warning "WARNING: WinRAR not found or not installed in standard path"
} elseif ([version]$winrar.Version -lt [version]"7.12.0") {
    Write-Host "Found WinRAR at: $($winrar.Path)"
    Write-Host "Installed version: $($winrar.Version)"
    Write-Warning "WARNING: WinRAR version is vulnerable (< 7.12)"
    $hasAlerts = $true
} else {
    Write-Host "Found WinRAR at: $($winrar.Path)"
    Write-Host "Installed version: $($winrar.Version)"
    Write-Host "WinRAR version is patched (>= 7.12)" -ForegroundColor Green
}

Write-Host "`n[*] Scanning for recent suspicious file creations..."
$paths = @(
    "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup",
    "$env:WINDIR\System32",
    "$env:WINDIR\SysWOW64"
)

foreach ($p in $paths) {
    Get-ChildItem -Path $p -Include *.exe,*.dll,*.lnk -File -Recurse -ErrorAction SilentlyContinue |
        Where-Object { $_.CreationTime -gt $cutoff } |
        ForEach-Object {
            Write-Warning "WARNING: Suspicious file in sensitive directory: $($_.FullName) (Created: $($_.CreationTime))"
            $hasAlerts = $true
        }
}

Write-Host "`n[*] Scanning %TEMP% for dropped binaries..."
$temp = [IO.Path]::GetTempPath()
Get-ChildItem -Path $temp -Include *.exe,*.msi,*.lnk -File -Recurse -ErrorAction SilentlyContinue |
    Where-Object { $_.CreationTime -gt $cutoff } |
    ForEach-Object {
        Write-Warning "WARNING: Recent temp file likely extracted: $($_.FullName)"
        $hasAlerts = $true
    }

Write-Host "`n[*] Checking for suspicious RAR/ZIP archive entries..."
$archives = Get-ChildItem -Path $temp -Include *.rar,*.zip -File -Recurse -ErrorAction SilentlyContinue |
    Where-Object { $_.CreationTime -gt $cutoff -and $_.Length -lt 50MB }

foreach ($a in $archives) {
    try {
        $output = & rar t -c- "$($a.FullName)" 2>&1
        $matches = $output | Where-Object { $_ -match '(\.\.[\\/]|[A-Z]:\\)' }
        foreach ($m in $matches) {
            Write-Warning "WARNING: Archive $($a.Name) has suspicious path: $m"
            $hasAlerts = $true
        }
    } catch {
        Write-Host "NOTE: Skipping archive $($a.Name): WinRAR CLI not available"
    }
}

Write-Host "`n[*] Checking for unexpected startup registry entries..."
$startupKeys = @(
    "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run",
    "HKLM:\Software\Microsoft\Windows\CurrentVersion\Run"
)

foreach ($key in $startupKeys) {
    try {
        Get-ItemProperty -Path $key | ForEach-Object {
            $_.PSObject.Properties | ForEach-Object {
                if ($_.Value -match "\\Users\\.*\\AppData\\Local\\Temp\\.*\.exe") {
                    Write-Warning "WARNING: Suspicious startup entry: $($_.Name) => $($_.Value)"
                    $hasAlerts = $true
                }
            }
        }
    } catch {
        Write-Host "NOTE: Cannot read key: $key"
    }
}
Write-Host "`nDetection Complete" -ForegroundColor Cyan
if ($hasAlerts) {
    Write-Host "WARNING: Indicators of vulnerability or exploitation detected" -ForegroundColor Red
} else {
    Write-Host "No indicators of exploitation detected. System appears safe." -ForegroundColor Green
}
